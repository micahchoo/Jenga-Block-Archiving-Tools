import { useState, useEffect } from 'react';
import {
  Annotorious,
import { 
  Annotorious, 
  OpenSeadragonAnnotator,
  OpenSeadragonViewer,
  W3CImageFormat
  ImageAnnotationPopup,
  W3CImageFormat 
} from '@annotorious/react';
import { MetadataSidebar } from './MetadataSidebar';
import { fetchAssetMetadata } from '../services/metadataService';

import '@annotorious/react/annotorious-react.css';

const API_KEY = import.meta.env.VITE_API_KEY;

export function ImageViewer() {
  const [assetId, setAssetId] = useState(null);
  const [drawingEnabled, setDrawingEnabled] = useState(false);
  const [imageUrl, setImageUrl] = useState(null);
  const [metadata, setMetadata] = useState(null);
  const [loading, setLoading] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(true);

  // Get asset ID from URL - only run once
  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const id = params.get('id');
    if (id) {
      setAssetId(id);
      console.log('Asset ID set to:', id);
    }
  }, []); // Empty dependency array

  // Load image and metadata when asset ID changes
  }, []);
  useEffect(() => {
    if (!assetId) return;
    let currentUrl = null;

    const loadAsset = async () => {
      setLoading(true);
      try {
        // Load image
        const response = await fetch(`/api/assets/${assetId}/original`, {
          headers: {
            'X-Api-Key': API_KEY,
            'Accept': 'image/*'  // Changed to accept images specifically
            'Accept': 'image/*'
          }
        });

        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

        const blob = await response.blob();
        currentUrl = URL.createObjectURL(blob);
        setImageUrl(currentUrl);
        console.log('Image loaded successfully');

        // Load metadata
        const metadataData = await fetchAssetMetadata(assetId, API_KEY);
        setMetadata(metadataData);
      } catch (error) {
        console.error('Error loading asset:', error);
      } finally {
        setLoading(false);
      }
    };

    loadAsset();

    // Cleanup function
    return () => {
      if (currentUrl) {
        URL.revokeObjectURL(currentUrl);
      }
    };
  }, [assetId]); // Only depend on assetId

  // OpenSeadragon configuration
  }, [assetId]);
  const osdOptions = {
    prefixUrl: "https://cdnjs.cloudflare.com/ajax/libs/openseadragon/4.1.0/images/",
    tileSources: imageUrl ? {
      type: 'image',
      url: imageUrl
    } : null,
    showNavigator: true,
    navigatorPosition: 'BOTTOM_RIGHT',
    defaultZoomLevel: 1,
    minZoomLevel: 0.1,
    maxZoomLevel: 10,
    constrainDuringPan: true,
    visibilityRatio: 1,
    navigationControlAnchor: 'TOP_LEFT',
    homeFillsViewer: true
  };
  console.log('OsdOptions', osdOptions);

  const handleMetadataChange = async (field, value) => {
    try {
      setMetadata(prev => ({
        ...prev,
        [field]: value
      }));
    } catch (error) {
      console.error('Error updating metadata:', error);
    }
  };

  const renderPopup = (props) => {
    const { annotation, onUpdateBody, onCreateBody } = props;
    
    const commentBody = annotation.bodies.find(body => body.purpose === 'commenting');
    
    const handleSaveComment = (comment) => {
      const updated = {
        purpose: 'commenting',
        value: comment
      };

  const handleAnnotationCreated = (annotation) => {
    console.log('Annotation created:', annotation);
  };
      if (commentBody) {
        onUpdateBody(commentBody, updated);
      } else {
        onCreateBody(updated);
      }
    };

  const handleAnnotationUpdated = (annotation, previous) => {
    console.log('Annotation updated:', annotation, 'Previous:', previous);
  };

  const handleAnnotationDeleted = (annotation) => {
    console.log('Annotation deleted:', annotation);
  };

  if (!assetId) return <div>No asset ID provided</div>;

  return (
    <div className="flex h-full w-full relative">
      {/* Main Content Area - Dynamic width based on sidebar state */}
      <div className="flex-grow flex flex-col min-w-0"
           style={{
            marginRight: sidebarOpen ? '320px' : '48px',  // 320px when open, 48px when collapsed
            transition: 'margin-right 300ms'  // Match the sidebar's transition duration
           }}>
        {/* Toolbar */}
        <div className="flex items-center p-2 bg-gray-800 border-b border-gray-700">
          <button
            onClick={() => setDrawingEnabled(!drawingEnabled)}
            className={`px-4 py-2 rounded ${
              drawingEnabled ? 'bg-blue-500 text-white' : 'bg-gray-600 hover:bg-gray-500 text-white'
            }`}
          >
            {drawingEnabled ? 'Stop Drawing' : 'Start Drawing'}
          </button>
        </div>

        {/* Viewer Container */}
        <div className="flex-grow relative min-h-0">
          {loading ? (
            <div className="absolute inset-0 flex items-center justify-center bg-gray-900 bg-opacity-50">
              <span className="text-white">Loading...</span>
            </div>
          ) : (
            <Annotorious>
              <OpenSeadragonAnnotator
                adapter={W3CImageFormat(assetId)}
                drawingEnabled={drawingEnabled}
                tool="rectangle"
                style={{
                  fill: '#ff0000',
                  fillOpacity: 0.25,
                  stroke: '#ff0000'
                }}
                onAnnotationCreated={handleAnnotationCreated}
                onAnnotationUpdated={handleAnnotationUpdated}
                onAnnotationDeleted={handleAnnotationDeleted}
              >
                {imageUrl && (
                  <OpenSeadragonViewer
                    options={osdOptions}
                    className="w-full h-full !absolute inset-0"
                  />
                )}
              </OpenSeadragonAnnotator>
            </Annotorious>
          )}
    return (
      <div className="bg-gray-800 text-white p-4 rounded-lg shadow-lg">
        <div className="space-y-4">
          <textarea 
            className="w-full bg-gray-700 text-white rounded p-2"
            defaultValue={commentBody?.value || ''}
            onChange={(e) => handleSaveComment(e.target.value)}
            placeholder="Add a comment..."
          />
          <div className="text-sm text-gray-400">
            Created: {new Date(annotation.created).toLocaleString()}
          </div>
        </div>
      </div>

      <MetadataSidebar
        metadata={metadata}
        onMetadataChange={handleMetadataChange}
        loading={loading}
        isOpen={sidebarOpen}
        onToggle={setSidebarOpen}
      />
    </div>
  );
}
    );
  };

  const handleMetadataChange = async (field, value) => {
    try {
      setMetadata(prev => ({
        ...prev,
        [field]: value
      }));
    } catch (error) {
      console.error('Error updating metadata:', error);
    }
  };

  const handleAnnotationCreated = (annotation) => {
    console.log('Annotation created:', annotation);
  };

  const handleAnnotationUpdated = (annotation, previous) => {
    console.log('Annotation updated:', annotation, 'Previous:', previous);
  };

  const handleAnnotationDeleted = (annotation) => {
    console.log('Annotation deleted:', annotation);
  };

  if (!assetId) return <div>No asset ID provided</div>;

  return (
    <div className="flex h-full w-full relative">
      <div className="flex-grow flex flex-col min-w-0" 
           style={{ 
            marginRight: sidebarOpen ? '320px' : '48px',
            transition: 'margin-right 300ms'
           }}>
        <div className="flex items-center p-2 bg-gray-800 border-b border-gray-700">
          <button
            onClick={() => setDrawingEnabled(!drawingEnabled)}
            className={`px-4 py-2 rounded ${
              drawingEnabled ? 'bg-blue-500 text-white' : 'bg-gray-600 hover:bg-gray-500 text-white'
            }`}
          >
            {drawingEnabled ? 'Stop Drawing' : 'Start Drawing'}
          </button>
        </div>

        <div className="flex-grow relative min-h-0">
          {loading ? (
            <div className="absolute inset-0 flex items-center justify-center bg-gray-900 bg-opacity-50">
              <span className="text-white">Loading...</span>
            </div>
          ) : (
            <Annotorious>
              <OpenSeadragonAnnotator 
                adapter={W3CImageFormat(assetId)}
                drawingEnabled={drawingEnabled}
                tool="rectangle"
                style={{
                  fill: '#ff0000',
                  fillOpacity: 0.25,
                  stroke: '#ff0000'
                }}
                onAnnotationCreated={handleAnnotationCreated}
                onAnnotationUpdated={handleAnnotationUpdated}
                onAnnotationDeleted={handleAnnotationDeleted}
              >
                {imageUrl && (
                  <OpenSeadragonViewer 
                    options={osdOptions}
                    className="w-full h-full !absolute inset-0"
                  />
                )}
                <ImageAnnotationPopup popup={renderPopup} />
              </OpenSeadragonAnnotator>
            </Annotorious>
          )}
        </div>
      </div>

      <MetadataSidebar 
        metadata={metadata} 
        onMetadataChange={handleMetadataChange}
        loading={loading}
        isOpen={sidebarOpen}
        onToggle={setSidebarOpen}
      />
    </div>
  );
}
